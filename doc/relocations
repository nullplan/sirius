Relocation types handled by other implementations
=================================================

For most architectures, finding out which relocation types must be handled in
shared libs and executables is a chore. For simplicity, I will therefore look up
what other implementations are handling, and how.

musl
----

R_AARCH64_ABS64
R_AARCH64_GLOB_DAT
R_AARCH64_JUMP_SLOT
R_AARCH64_RELATIVE
R_AARCH64_COPY
R_AARCH64_TLS_DTPMOD64
R_AARCH64_TLS_DTPREL64
R_AARCH64_TLS_TPREL64
R_AARCH64_TLSDESC

R_PPC_ADDR32
R_PPC_UADDR32
R_PPC_GLOB_DAT
R_PPC_JMP_SLOT
R_PPC_RELATIVE
R_PPC_COPY
R_PPC_DTPMOD32
R_PPC_DTPREL32
R_PPC_TPREL32

R_PPC64_ADDR64
R_PPC64_UADDR64
R_PPC64_GLOB_DAT
R_PPC64_JMP_SLOT
R_PPC64_RELATIVE
R_PPC64_COPY
R_PPC64_DTPMOD64
R_PPC64_DTPREL64
R_PPC64_TPREL64

R_386_32
R_386_PC32
R_386_GLOB_DAT
R_386_JMP_SLOT
R_386_RELATIVE
R_386_COPY
R_386_TLS_DTPMOD32
R_386_TLS_DTPOFF32
R_386_TLS_TPOFF
R_386_TLS_TPOFF32
R_386_TLS_DESC

x32:
R_X86_64_32
R_X86_64_PC32
R_X86_64_GLOB_DAT
R_X86_64_JUMP_SLOT
R_X86_64_RELATIVE
R_X86_64_COPY
R_X86_64_DTPMOD64
R_X86_64_DTPOFF64
R_X86_64_TPOFF64

R_X86_64_64
R_X86_64_PC32
R_X86_64_GLOB_DAT
R_X86_64_JUMP_SLOT
R_X86_64_RELATIVE
R_X86_64_COPY
R_X86_64_DTPMOD64
R_X86_64_DTPOFF64
R_X86_64_TPOFF64
R_X86_64_TLSDESC

dietlibc
--------

Although I'm not sure if these are complete. dietlibc has a weird code structure.

Oh, and it seems it doesn't handle PPC or aarch64.

R_386_32
R_386_COPY
R_386_GLOB_DAT
R_386_JMP_SLOT
R_386_RELATIVE
R_386_NONE

R_X86_64_64
R_X86_64_COPY
R_X86_64_GLOB_DAT
R_X86_64_JUMP_SLOT
R_X86_64_RELATIVE
R_X86_64_32
R_X86_64_NONE

glibc
-----

R_AARCH64_GLOB_DAT
R_AARCH64_JUMP_SLOT
R_AARCH64_ABS32
R_AARCH64_ABS64
R_AARCH64_COPY
R_AARCH64_TLSDESC
R_AARCH64_TLS_DTPMOD
R_AARCH64_TLS_DTPREL
R_AARCH64_TLS_TPREL
R_AARCH64_IRELATIVE

R_PPC_ADDR14
R_PPC_ADDR14_BRNTAKEN
R_PPC_ADDR14_BRTAKEN
R_PPC_ADDR16
R_PPC_ADDR16_HA
R_PPC_ADDR16_HI
R_PPC_ADDR16_LO
R_PPC_ADDR24
R_PPC_ADDR32
R_PPC_COPY
R_PPC_DTPMOD32
R_PPC_DTPREL16
R_PPC_DTPREL16_HA
R_PPC_DTPREL16_HI
R_PPC_DTPREL16_LO
R_PPC_DTPREL32
R_PPC_GLOB_DAT
R_PPC_IRELATIVE
R_PPC_JMP_SLOT
R_PPC_NONE
R_PPC_REL24
R_PPC_REL32
R_PPC_RELATIVE
R_PPC_TPREL16
R_PPC_TPREL16_HA
R_PPC_TPREL16_HI
R_PPC_TPREL16_LO
R_PPC_TPREL32
R_PPC_UADDR16
R_PPC_UADDR32

R_PPC64_ADDR14
R_PPC64_ADDR14_BRNTAKEN
R_PPC64_ADDR14_BRTAKEN
R_PPC64_ADDR16
R_PPC64_ADDR16_DS
R_PPC64_ADDR16_HA
R_PPC64_ADDR16_HI
R_PPC64_ADDR16_HIGHA
R_PPC64_ADDR16_HIGHER
R_PPC64_ADDR16_HIGHERA
R_PPC64_ADDR16_HIGHEST
R_PPC64_ADDR16_HIGHESTA
R_PPC64_ADDR16_LO
R_PPC64_ADDR16_LO_DS
R_PPC64_ADDR24
R_PPC64_ADDR30
R_PPC64_ADDR32
R_PPC64_ADDR64
R_PPC64_COPY
R_PPC64_DTPMOD64
R_PPC64_DTPREL64
R_PPC64_GLOB_DAT
R_PPC64_IRELATIVE
R_PPC64_JMP_IREL
R_PPC64_JMP_SLOT
R_PPC64_REL32
R_PPC64_REL64
R_PPC64_TPREL16
R_PPC64_TPREL16_DS
R_PPC64_TPREL16_HA
R_PPC64_TPREL16_HI
R_PPC64_TPREL16_HIGH
R_PPC64_TPREL16_HIGHA
R_PPC64_TPREL16_HIGHER
R_PPC64_TPREL16_HIGHERA
R_PPC64_TPREL16_HIGHEST
R_PPC64_TPREL16_HIGHESTA
R_PPC64_TPREL16_LO
R_PPC64_TPREL16_LO_DS
R_PPC64_TPREL64
R_PPC64_UADDR16
R_PPC64_UADDR32
R_PPC64_UADDR64

R_386_SIZE32
R_386_GLOB_DAT
R_386_JMP_SLOT
R_386_TLS_DTPMOD32
R_386_TLS_DTPOFF32
R_386_TLS_DESC
R_386_TLS_TPOFF32
R_386_TLS_TPOFF
R_386_32
R_386_PC32
R_386_COPY
R_386_IRELATIVE

R_X86_64_GLOB_DAT
R_X86_64_JUMP_SLOT
R_X86_64_SIZE64
R_X86_64_SIZE32
R_X86_64_DTPMOD64
R_X86_64_DTPOFF64
R_X86_64_TLSDESC
R_X86_64_TPOFF64
R_X86_64_64
R_X86_64_32
R_X86_64_PC32
R_X86_64_COPY
R_X86_64_IRELATIVE

bionic
------

R_AARCH64_JUMP_SLOT
R_AARCH64_ABS64
R_AARCH64_GLOB_DAT
R_AARCH64_RELATIVE
R_AARCH64_IRELATIVE
R_AARCH64_COPY
R_AARCH64_TLS_DTPMOD
R_AARCH64_TLS_DTPREL
R_AARCH64_TLS_TPREL
R_AARCH64_TLSDESC

R_386_JMP_SLOT
R_386_32
R_386_GLOB_DAT
R_386_RELATIVE
R_386_IRELATIVE
R_386_COPY
R_386_TLS_DTPMOD32
R_386_TLS_DTPOFF32
R_386_TLS_TPOFF
R_386_TLS_DESC

R_X86_64_JUMP_SLOT
R_X86_64_64
R_X86_64_GLOB_DAT
R_X86_64_RELATIVE
R_X86_64_IRELATIVE
R_X86_64_COPY
R_X86_64_DTPMOD64
R_X86_64_DTPOFF64
R_X86_64_TPOFF64
R_X86_64_TLSDESC

Critique
--------

Let's try to get a better overview.

                    glibc   musl    dietlibc    bionic
R_X86_64_GLOB_DAT       x   x       x           x
R_X86_64_JUMP_SLOT      x   x       x           x
R_X86_64_SIZE64         x
R_X86_64_SIZE32         x
R_X86_64_DTPMOD64       x   x                   x
R_X86_64_DTPOFF64       x   x                   x
R_X86_64_TLSDESC        x   x                   x
R_X86_64_TPOFF64        x   x                   x
R_X86_64_64             x   x       x           x
R_X86_64_32             x           x           x
R_X86_64_PC32           x   x                   x
R_X86_64_COPY           x   x       x           x
R_X86_64_IRELATIVE      x                       x
R_X86_64_RELATIVE       x   x       x           x

glibc is the only one that handles SIZE relocs. I doubt they can be generated at
all, so I will not handle them. Obviously I also won't handle ifuncs. So it
seems like the musl set is the correct one. Only open question is R_X86_64_32.

glibc's set for PPC is obviously insane. Most of these are code relocations, and
I won't handle those at all, because that would mean writing into the code
segment.

For now, I will just handle the musl set without TLS (and add TLS later).
